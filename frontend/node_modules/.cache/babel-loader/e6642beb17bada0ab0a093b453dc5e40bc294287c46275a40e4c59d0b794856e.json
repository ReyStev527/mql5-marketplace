{"ast":null,"code":"// Mock authentication service for testing without backend\nexport const mockAuthAPI={login:async credentials=>{// Simulate network delay\nawait new Promise(resolve=>setTimeout(resolve,1000));// Mock login logic\nif(credentials.email==='admin@mql5marketplace.com'&&credentials.password==='admin123'){return{data:{success:true,token:'mock-admin-jwt-token-12345',user:{id:'1',email:'admin@mql5marketplace.com',name:'Admin User',role:'admin'}}};}else if(credentials.email==='user@example.com'&&credentials.password==='user123'){return{data:{success:true,token:'mock-user-jwt-token-67890',user:{id:'2',email:'user@example.com',name:'John Trader',role:'user'}}};}else{throw new Error('Invalid credentials');}}};// Check if backend is available\nexport const checkBackendConnection=async()=>{try{const response=await fetch('http://localhost:3000/api/health');return response.ok;}catch(error){console.warn('Backend not available, using mock mode');return false;}};","map":{"version":3,"names":["mockAuthAPI","login","credentials","Promise","resolve","setTimeout","email","password","data","success","token","user","id","name","role","Error","checkBackendConnection","response","fetch","ok","error","console","warn"],"sources":["/workspaces/mql5-marketplace/frontend/src/services/mockAuth.js"],"sourcesContent":["// Mock authentication service for testing without backend\nexport const mockAuthAPI = {\n  login: async (credentials) => {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock login logic\n    if (credentials.email === 'admin@mql5marketplace.com' && credentials.password === 'admin123') {\n      return {\n        data: {\n          success: true,\n          token: 'mock-admin-jwt-token-12345',\n          user: {\n            id: '1',\n            email: 'admin@mql5marketplace.com',\n            name: 'Admin User',\n            role: 'admin'\n          }\n        }\n      };\n    } else if (credentials.email === 'user@example.com' && credentials.password === 'user123') {\n      return {\n        data: {\n          success: true,\n          token: 'mock-user-jwt-token-67890',\n          user: {\n            id: '2',\n            email: 'user@example.com',\n            name: 'John Trader',\n            role: 'user'\n          }\n        }\n      };\n    } else {\n      throw new Error('Invalid credentials');\n    }\n  }\n};\n\n// Check if backend is available\nexport const checkBackendConnection = async () => {\n  try {\n    const response = await fetch('http://localhost:3000/api/health');\n    return response.ok;\n  } catch (error) {\n    console.warn('Backend not available, using mock mode');\n    return false;\n  }\n};\n"],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,WAAW,CAAG,CACzBC,KAAK,CAAE,KAAO,CAAAC,WAAW,EAAK,CAC5B;AACA,KAAM,IAAI,CAAAC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD;AACA,GAAIF,WAAW,CAACI,KAAK,GAAK,2BAA2B,EAAIJ,WAAW,CAACK,QAAQ,GAAK,UAAU,CAAE,CAC5F,MAAO,CACLC,IAAI,CAAE,CACJC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,4BAA4B,CACnCC,IAAI,CAAE,CACJC,EAAE,CAAE,GAAG,CACPN,KAAK,CAAE,2BAA2B,CAClCO,IAAI,CAAE,YAAY,CAClBC,IAAI,CAAE,OACR,CACF,CACF,CAAC,CACH,CAAC,IAAM,IAAIZ,WAAW,CAACI,KAAK,GAAK,kBAAkB,EAAIJ,WAAW,CAACK,QAAQ,GAAK,SAAS,CAAE,CACzF,MAAO,CACLC,IAAI,CAAE,CACJC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,2BAA2B,CAClCC,IAAI,CAAE,CACJC,EAAE,CAAE,GAAG,CACPN,KAAK,CAAE,kBAAkB,CACzBO,IAAI,CAAE,aAAa,CACnBC,IAAI,CAAE,MACR,CACF,CACF,CAAC,CACH,CAAC,IAAM,CACL,KAAM,IAAI,CAAAC,KAAK,CAAC,qBAAqB,CAAC,CACxC,CACF,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,sBAAsB,CAAG,KAAAA,CAAA,GAAY,CAChD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,kCAAkC,CAAC,CAChE,MAAO,CAAAD,QAAQ,CAACE,EAAE,CACpB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACC,IAAI,CAAC,wCAAwC,CAAC,CACtD,MAAO,MAAK,CACd,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}