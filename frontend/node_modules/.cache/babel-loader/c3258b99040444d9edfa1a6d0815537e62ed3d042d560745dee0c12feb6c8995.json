{"ast":null,"code":"// frontend/src/utils/formatters.js\n/**\n * Format currency to Indonesian Rupiah\n * @param {number} amount - Amount to format\n * @returns {string} Formatted currency string\n */export const formatCurrency=amount=>{return new Intl.NumberFormat('id-ID',{style:'currency',currency:'IDR',minimumFractionDigits:0,maximumFractionDigits:0}).format(amount);};/**\n * Format number with thousand separators\n * @param {number} number - Number to format\n * @returns {string} Formatted number string\n */export const formatNumber=number=>{return new Intl.NumberFormat('id-ID').format(number);};/**\n * Format date to Indonesian locale\n * @param {string|Date} date - Date to format\n * @param {Object} options - Formatting options\n * @returns {string} Formatted date string\n */export const formatDate=function(date){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const defaultOptions={year:'numeric',month:'long',day:'numeric'};return new Date(date).toLocaleDateString('id-ID',{...defaultOptions,...options});};/**\n * Format date with time\n * @param {string|Date} date - Date to format\n * @returns {string} Formatted date and time string\n */export const formatDateTime=date=>{return new Date(date).toLocaleDateString('id-ID',{year:'numeric',month:'long',day:'numeric',hour:'2-digit',minute:'2-digit'});};/**\n * Format relative time (e.g., \"2 days ago\")\n * @param {string|Date} date - Date to format\n * @returns {string} Relative time string\n */export const formatRelativeTime=date=>{const now=new Date();const target=new Date(date);const diffMs=now-target;const minute=60*1000;const hour=minute*60;const day=hour*24;const week=day*7;const month=day*30;const year=day*365;if(diffMs<minute){return'Baru saja';}else if(diffMs<hour){const minutes=Math.floor(diffMs/minute);return`${minutes} menit yang lalu`;}else if(diffMs<day){const hours=Math.floor(diffMs/hour);return`${hours} jam yang lalu`;}else if(diffMs<week){const days=Math.floor(diffMs/day);return`${days} hari yang lalu`;}else if(diffMs<month){const weeks=Math.floor(diffMs/week);return`${weeks} minggu yang lalu`;}else if(diffMs<year){const months=Math.floor(diffMs/month);return`${months} bulan yang lalu`;}else{const years=Math.floor(diffMs/year);return`${years} tahun yang lalu`;}};/**\n * Format file size to human readable format\n * @param {number} bytes - File size in bytes\n * @returns {string} Formatted file size\n */export const formatFileSize=bytes=>{if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];};/**\n * Truncate text to specified length\n * @param {string} text - Text to truncate\n * @param {number} maxLength - Maximum length\n * @returns {string} Truncated text\n */export const truncateText=function(text){let maxLength=arguments.length>1&&arguments[1]!==undefined?arguments[1]:100;if(text.length<=maxLength)return text;return text.substr(0,maxLength)+'...';};/**\n * Capitalize first letter of each word\n * @param {string} str - String to capitalize\n * @returns {string} Capitalized string\n */export const capitalizeWords=str=>{return str.replace(/\\w\\S*/g,txt=>txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase());};/**\n * Generate random color for avatars\n * @param {string} seed - Seed for consistent color generation\n * @returns {string} Hex color code\n */export const generateAvatarColor=seed=>{const colors=['#f44336','#e91e63','#9c27b0','#673ab7','#3f51b5','#2196f3','#03a9f4','#00bcd4','#009688','#4caf50','#8bc34a','#cddc39','#ffeb3b','#ffc107','#ff9800','#ff5722'];let hash=0;for(let i=0;i<seed.length;i++){hash=seed.charCodeAt(i)+((hash<<5)-hash);}return colors[Math.abs(hash)%colors.length];};","map":{"version":3,"names":["formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatNumber","number","formatDate","date","options","arguments","length","undefined","defaultOptions","year","month","day","Date","toLocaleDateString","formatDateTime","hour","minute","formatRelativeTime","now","target","diffMs","week","minutes","Math","floor","hours","days","weeks","months","years","formatFileSize","bytes","k","sizes","i","log","parseFloat","pow","toFixed","truncateText","text","maxLength","substr","capitalizeWords","str","replace","txt","charAt","toUpperCase","toLowerCase","generateAvatarColor","seed","colors","hash","charCodeAt","abs"],"sources":["/workspaces/mql5-marketplace/frontend/src/utils/formatters.js"],"sourcesContent":["// frontend/src/utils/formatters.js\n\n/**\n * Format currency to Indonesian Rupiah\n * @param {number} amount - Amount to format\n * @returns {string} Formatted currency string\n */\nexport const formatCurrency = (amount) => {\n  return new Intl.NumberFormat('id-ID', {\n    style: 'currency',\n    currency: 'IDR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\n/**\n * Format number with thousand separators\n * @param {number} number - Number to format\n * @returns {string} Formatted number string\n */\nexport const formatNumber = (number) => {\n  return new Intl.NumberFormat('id-ID').format(number);\n};\n\n/**\n * Format date to Indonesian locale\n * @param {string|Date} date - Date to format\n * @param {Object} options - Formatting options\n * @returns {string} Formatted date string\n */\nexport const formatDate = (date, options = {}) => {\n  const defaultOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n  \n  return new Date(date).toLocaleDateString('id-ID', {\n    ...defaultOptions,\n    ...options,\n  });\n};\n\n/**\n * Format date with time\n * @param {string|Date} date - Date to format\n * @returns {string} Formatted date and time string\n */\nexport const formatDateTime = (date) => {\n  return new Date(date).toLocaleDateString('id-ID', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n};\n\n/**\n * Format relative time (e.g., \"2 days ago\")\n * @param {string|Date} date - Date to format\n * @returns {string} Relative time string\n */\nexport const formatRelativeTime = (date) => {\n  const now = new Date();\n  const target = new Date(date);\n  const diffMs = now - target;\n  \n  const minute = 60 * 1000;\n  const hour = minute * 60;\n  const day = hour * 24;\n  const week = day * 7;\n  const month = day * 30;\n  const year = day * 365;\n  \n  if (diffMs < minute) {\n    return 'Baru saja';\n  } else if (diffMs < hour) {\n    const minutes = Math.floor(diffMs / minute);\n    return `${minutes} menit yang lalu`;\n  } else if (diffMs < day) {\n    const hours = Math.floor(diffMs / hour);\n    return `${hours} jam yang lalu`;\n  } else if (diffMs < week) {\n    const days = Math.floor(diffMs / day);\n    return `${days} hari yang lalu`;\n  } else if (diffMs < month) {\n    const weeks = Math.floor(diffMs / week);\n    return `${weeks} minggu yang lalu`;\n  } else if (diffMs < year) {\n    const months = Math.floor(diffMs / month);\n    return `${months} bulan yang lalu`;\n  } else {\n    const years = Math.floor(diffMs / year);\n    return `${years} tahun yang lalu`;\n  }\n};\n\n/**\n * Format file size to human readable format\n * @param {number} bytes - File size in bytes\n * @returns {string} Formatted file size\n */\nexport const formatFileSize = (bytes) => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * Truncate text to specified length\n * @param {string} text - Text to truncate\n * @param {number} maxLength - Maximum length\n * @returns {string} Truncated text\n */\nexport const truncateText = (text, maxLength = 100) => {\n  if (text.length <= maxLength) return text;\n  return text.substr(0, maxLength) + '...';\n};\n\n/**\n * Capitalize first letter of each word\n * @param {string} str - String to capitalize\n * @returns {string} Capitalized string\n */\nexport const capitalizeWords = (str) => {\n  return str.replace(/\\w\\S*/g, (txt) => \n    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  );\n};\n\n/**\n * Generate random color for avatars\n * @param {string} seed - Seed for consistent color generation\n * @returns {string} Hex color code\n */\nexport const generateAvatarColor = (seed) => {\n  const colors = [\n    '#f44336', '#e91e63', '#9c27b0', '#673ab7',\n    '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4',\n    '#009688', '#4caf50', '#8bc34a', '#cddc39',\n    '#ffeb3b', '#ffc107', '#ff9800', '#ff5722'\n  ];\n  \n  let hash = 0;\n  for (let i = 0; i < seed.length; i++) {\n    hash = seed.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  \n  return colors[Math.abs(hash) % colors.length];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}